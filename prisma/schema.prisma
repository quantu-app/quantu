// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//===========================
// USERS
//===========================
model User {
  @@map("users")
  id Int @id @default(autoincrement())

  // attributes
  username            String  @unique
  encrypted_password  String
  active              Boolean @default(true)
  confirmed           Boolean @default(false)
  creator             Boolean @default(false)
  confirmed_at DateTime?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // relations
  emails                  Email[]
  application_setting     ApplicationSetting?
  channel_memberships     ChannelMembership[]

  created_decks           Deck[]
  flash_cards             FlashCard[]
  flash_card_results      FlashCardResult[]
}

model Email {
  @@map("emails")
  id Int @id @default(autoincrement())

  // attributes
  email     String
  primary   Boolean @default(false)
  confirmed Boolean @default(false)
  confirmedAt DateTime?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // relations
  user   User @relation(fields: [user_id], references: [id])
  user_id Int

  // indices
  @@unique([user_id, email])
}

model ApplicationSetting {
  @@map("application_settings")
  id Int @id @default(autoincrement())

  // attributes
  locale String @default("en")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // relations
  user   User @relation(fields: [user_id], references: [id])
  user_id Int  @unique

  // indices
  @@unique([user_id, id])
}

//===========================
// CHANNELS
//===========================
enum ChannelMembershipRole {
  PERSONAL
  OWNER
  MEMBER
}

model ChannelMembership {
  @@map("channel_memberships")
  id Int @id @default(autoincrement())

  // attributes
  role ChannelMembershipRole @default(MEMBER)

  // relations
  user        User @relation(fields: [user_id], references: [id])
  user_id     Int
  channel     Channel @relation(fields: [channel_id], references: id)
  channel_id  Int

  // indices
  @@unique([user_id, channel_id])
}

model Channel {
  @@map("channels")
  id Int @id @default(autoincrement())

  // attributes
  name String
  uri String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // relations
  channel_memberships   ChannelMembership[]
  decks                 Deck[]
  flash_cards           FlashCard[]
  flash_card_list_items FlashCardDeckItem[]

  @@unique([uri])
}

model Deck {
  @@map("decks")
  id Int @id @default(autoincrement())

  name  String
  url   String

  // relations
  channel   Channel @relation(fields: [channel_id], references: [id])
  channel_id Int
  creator    User @relation(fields: [creator_id], references: [id])
  creator_id Int

  flash_card_list_items FlashCardDeckItem[]
}

model FlashCardDeckItem {
  @@map("flash_card_deck_items")
  id Int @id @default(autoincrement())

  // relations
  channel   Channel @relation(fields: [channel_id], references: [id])
  channel_id Int
  deck   Deck @relation(fields: [deck_id], references: [id])
  deck_id Int
  flash_card FlashCard @relation(fields: [flash_card_id], references: [id])
  flash_card_id Int
}

enum FlashCardType {
  BASIC
}

model FlashCard {
  @@map("flash_cards")
  id Int @id @default(autoincrement())

  // attributes
  name        String
  url         String
  description Json
  type        FlashCardType @default(BASIC)
  front       Json
  back        Json
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // relations
  channel   Channel @relation(fields: [channel_id], references: [id])
  channel_id Int
  creator    User @relation(fields: [creator_id], references: [id])
  creator_id Int
  flash_card_results      FlashCardResult[]
  flash_card_list_items   FlashCardDeckItem[]

  @@unique([channel_id, url])
}

model FlashCardResult {
  @@map("flash_card_results")
  id Int @id @default(autoincrement())

  score Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // relations
  user            User        @relation(fields: [user_id], references: [id])
  user_id         Int
  flash_card      FlashCard   @relation(fields: [flash_card_id], references: [id])
  flash_card_id   Int
}